# do not use "latest" here, if you want this to work in the future
image: node:16-alpine

#image: ubuntu:20.04
#image: docker:20

stages:
  - build
  - push

# Use this if your GitLab runner does not use socket binding
services:
  - docker:20-dind

before_script:
  - docker info
  - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_TOKEN $DOCKER_REGISTRY
#  - echo -n $DOCKER_REGISTRY_TOKEN | docker login -u $DOCKER_REGISTRY_USER --password-stdin $DOCKER_REGISTRY

Build_Base:
  stage: build
  script:
    - docker pull $DOCKER_REGISTRY_IMAGE:nest-simulator-build-base || true
    - docker pull $DOCKER_REGISTRY_IMAGE:nest-simulator-deploy-base || true
    - docker build
      --file src/base/Dockerfile-build-base
      --cache-from $DOCKER_REGISTRY_IMAGE:nest-simulator-build-base
      --tag $DOCKER_REGISTRY_IMAGE:nest-simulator-build-base
      .
    - docker push $DOCKER_REGISTRY_IMAGE:nest-simulator-build-base
    - docker build
      --file src/base/Dockerfile-deploy-base
      --cache-from $DOCKER_REGISTRY_IMAGE:nest-simulator-deploy-base
      --tag $DOCKER_REGISTRY_IMAGE:nest-simulator-deploy-base
      .
    - docker push $DOCKER_REGISTRY_IMAGE:nest-simulator-deploy-base
  when: manual

Build_Dev:
  stage: build
  script:
    - docker pull $DOCKER_REGISTRY_IMAGE:dev || true
    - docker build 
        --cache-from $DOCKER_REGISTRY_IMAGE:dev
        --tag $DOCKER_REGISTRY_IMAGE:dev.$CI_PIPELINE_ID 
        ./src/dev  
    - docker push $DOCKER_REGISTRY_IMAGE:dev.$CI_PIPELINE_ID

Build_3x:
  stage: build
  script:
    - docker pull $DOCKER_REGISTRY_IMAGE:3.x  || true
    - docker build 
        --cache-from $DOCKER_REGISTRY_IMAGE:3.x
        --tag $DOCKER_REGISTRY_IMAGE:3.x.$CI_PIPELINE_ID 
        ./src/3.x
    - docker push $DOCKER_REGISTRY_IMAGE:3.x.$CI_PIPELINE_ID
  when: manual
